name: Maven Deploy and Tag

on:
  # Trigger the workflow manually or when you push to main
  workflow_dispatch:
  push:
    branches: [ main ]

# Add permissions for GitHub Actions
permissions:
  contents: write
  packages: write

jobs:
  verify-version-change:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'adopt'
          cache: maven
          server-id: github
          server-username: GITHUB_ACTOR
          server-password: GITHUB_TOKEN

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "Current version: $CURRENT_VERSION"

      - name: Check version against latest tag
        id: check_version
        run: |
          # Get current version
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "Current version: $CURRENT_VERSION"
          
          # Get latest tag (if any)
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LATEST_TAG" ]; then
            echo "No previous tags found. This is the first version."
            echo "LATEST_TAG_VERSION=none" >> $GITHUB_ENV
            exit 0
          fi
          
          # Extract version from tag (remove 'v' prefix if it exists)
          LATEST_TAG_VERSION=${LATEST_TAG#v}
          echo "LATEST_TAG_VERSION=$LATEST_TAG_VERSION" >> $GITHUB_ENV
          echo "Latest tag version: $LATEST_TAG_VERSION"
          
          # Compare versions
          if [ "$CURRENT_VERSION" == "$LATEST_TAG_VERSION" ]; then
            echo "::error::Version in pom.xml ($CURRENT_VERSION) is the same as the latest tag ($LATEST_TAG)!"
            echo "VERSION_CHANGED=false" >> $GITHUB_ENV
            exit 1
          else
            echo "Version changed from $LATEST_TAG_VERSION to $CURRENT_VERSION"
            echo "VERSION_CHANGED=true" >> $GITHUB_ENV
          fi

      - name: Send Telegram notification on version check failure
        if: failure()
        uses: appleboy/telegram-action@master
        with:
          to: "-1002382493793"
          token: "8041139682:AAG_XUO5LqXC1EeQn8E1ApvViTeb3bewiHc"
          message: |
            ❌ *Version Check Failed!*
            
            *Repository:* ${{ github.repository }}
            *Branch:* ${{ github.ref_name }}
            *Commit:* ${{ github.sha }}
            
            The version in pom.xml has not changed!
            Current version: *${{ env.CURRENT_VERSION }}*
            Latest tag version: *${{ env.LATEST_TAG_VERSION }}*
            
            Please update the version in pom.xml before pushing to main.
            
            Triggered by: @${{ github.actor }}
          format: markdown
          disable_notification: false

  build-and-tag:
    needs: verify-version-change
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Important for getting version info
          token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'adopt'
          cache: maven
          server-id: github
          server-username: GITHUB_ACTOR
          server-password: GITHUB_TOKEN

      - name: Extract Maven project version
        id: get_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Extracted version: $VERSION"

      - name: Build and deploy with Maven
        id: mvn_deploy
        run: |
          # Run Maven with settings file
          mvn clean deploy
          MAVEN_EXIT_CODE=$?
          echo "MAVEN_EXIT_CODE=$MAVEN_EXIT_CODE" >> $GITHUB_ENV
          exit $MAVEN_EXIT_CODE
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

      # Only proceed with tag and release if maven deploy was successful
      - name: Create and push tag
        if: env.MAVEN_EXIT_CODE == '0'
        run: |
          git config --local user.email "dev@joshuasalcedo.io"
          git config --local user.name "joshuasalcedo-dev"
          
          # Create a tag with the extracted version
          git tag -a v${{ env.VERSION }} -m "Release version ${{ env.VERSION }}"
          
          # Push the tag using authenticated URL
          git push origin v${{ env.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

      - name: Generate Release Notes
        if: success()
        id: release_notes
        run: |
          # Get commits since the last tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 --always HEAD^ 2>/dev/null || echo "")

          # Create release notes file
          echo "## What's Changed" > release_notes.md

          if [ -z "$PREVIOUS_TAG" ]; then
            # If there's no previous tag, get all commits
            git log --pretty=format:"* %s (%h) - %an" >> release_notes.md
          else
            # Get commits between last tag and current commit
            git log --pretty=format:"* %s (%h) - %an" $PREVIOUS_TAG..HEAD >> release_notes.md
          fi
      

      - name: Create GitHub Release
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN}}


      - name: Send Telegram notification on deployment failure
        if: failure() && github.job == 'build-and-tag'
        uses: appleboy/telegram-action@master
        with:
          to: "-1002382493793"
          token: "8041139682:AAG_XUO5LqXC1EeQn8E1ApvViTeb3bewiHc"
          message: |
            ❌ *Deployment Failed!*
            
            *Repository:* ${{ github.repository }}
            *Branch:* ${{ github.ref_name }}
            *Commit:* ${{ github.sha }}
            
            The Maven deployment process failed.
            Please check the GitHub Actions logs for more details.
            
            Triggered by: @${{ github.actor }}
          format: markdown
          disable_notification: false

      - name: Send Telegram notification on successful deployment
        if: success() && github.job == 'build-and-tag'
        uses: appleboy/telegram-action@master
        with:
          to: "-1002382493793"
          token: "8041139682:AAG_XUO5LqXC1EeQn8E1ApvViTeb3bewiHc"
          message: |
            ✅ *Deployment Successful!*

            *Repository:* ${{ github.repository }}
            *Version:* v${{ env.VERSION }}
            *Branch:* ${{ github.ref_name }}

            A new version has been successfully deployed and tagged.

            *Deployed by:* @${{ github.actor }}

            [View Release](https://github.com/${{ github.repository }}/releases/tag/v${{ env.VERSION }})
          format: markdown
